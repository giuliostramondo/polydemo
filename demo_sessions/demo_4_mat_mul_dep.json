{"1":["context, domain, schedule, reads, writes = parse_code(\"\"\"\n#pragma scop\nfor (i = 0; i < N; i++)\n  for (j = 0; j < M; j++) {\nS:  C[i][j] = 0.0;\n    for (k = 0; k < K; ++k)\nT:    C[i][j] += A[i][k] * B[k][j];\n  }\n#pragma endscop\n\"\"\")","","python"],"2":["print_latex(context)","\\[(N, M, K) \\to \\{\\, () \\,\\}\\]\n","python"],"3":["print_latex(domain)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\mid N > 0 \\wedge M > 0 \\wedge 0 \\le i < N \\wedge 0 \\le j < M \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\mid N > 0 \\wedge M > 0 \\wedge K > 0 \\wedge 0 \\le i < N \\wedge 0 \\le j < M \\wedge 0 \\le k < K \\,\\}\\\\\\end{array}\\]\n","python"],"4":["print_latex(schedule)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to (0, i, 0, j, 1, k, 0) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to (0, i, 0, j, 0) \\,\\}\\\\\\end{array}\\]\n","python"],"5":["print_latex(writes)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to \\mathrm{C}(i, j) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{C}(i, j) \\,\\}\\\\\\end{array}\\]\n","python"],"6":["print_latex(reads)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{A}(i, k) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{C}(i, j) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{B}(k, j) \\,\\}\\\\\\end{array}\\]\n","python"],"7":["#Pad Schedule\n","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"padschedule\">Pad Schedule</h1>\n","markdown"],"8":["padder = isl.union_map(\"{[i1,i2,i3,i4,i5]->[i1,i2,i3,i4,i5,0,0];[i1,i2,i3,i4,i5,i6,i7]-> [i1,i2,i3,i4,i5,i6,i7]}\")\npadded_schedule = schedule.apply_range(padder)\nprint_latex(padded_schedule)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to (0, i, 0, j, 0, 0, 0) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to (0, i, 0, j, 1, k, 0) \\,\\}\\\\\\end{array}\\]\n","python"],"9":["## Time order relation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"timeorderrelation\">Time order relation</h2>\n","markdown"],"10":["schedule_space = isl.set(\"{[i1,i2,i3,i4,i5,i6,i7]:}\").get_space()\nprecedes = isl.map.lex_lt(schedule_space)\nprint_latex(precedes)","\\[\\begin{array}{l}\\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1', i2', i3', i4', i5', i6', i7') \\mid i1' > i1 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2', i3', i4', i5', i6', i7') \\mid i2' > i2 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2' = i2, i3', i4', i5', i6', i7') \\mid i3' > i3 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2' = i2, i3' = i3, i4', i5', i6', i7') \\mid i4' > i4 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2' = i2, i3' = i3, i4' = i4, i5', i6', i7') \\mid i5' > i5 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2' = i2, i3' = i3, i4' = i4, i5' = i5, i6', i7') \\mid i6' > i6 \\,\\} \\cup\\\\\\quad\\cup \\{\\, (i1, i2, i3, i4, i5, i6, i7) \\to (i1' = i1, i2' = i2, i3' = i3, i4' = i4, i5' = i5, i6' = i6, i7') \\mid i7' > i7 \\,\\}\\\\\\end{array}\\]\n","python"],"11":["# Dependencies\n## Read-After-Write","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h1 id=\"dependencies\">Dependencies</h1>\n<h2 id=\"readafterwrite\">Read-After-Write</h2>\n","markdown"],"12":["RAW_rel = writes.apply_range(reads.reverse())\nRAW_rel = RAW_rel.apply_domain(padded_schedule).apply_range(padded_schedule)\nRAW_rel = RAW_rel.intersect(precedes)\nRAW_rel = RAW_rel.apply_domain(padded_schedule.reverse()).apply_range(padded_schedule.reverse())\nprint_latex(RAW_rel)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to \\mathrm{T}(i' = i, j' = j, k) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{T}(i' = i, j' = j, k') \\mid k' > k \\,\\}\\\\\\end{array}\\]\n","python"],"13":["## Write-After-Read","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"writeafterread\">Write-After-Read</h2>\n","markdown"],"14":["WAR_rel = reads.apply_range(writes.reverse())\nWAR_rel = WAR_rel.apply_domain(padded_schedule).apply_range(padded_schedule)\nWAR_rel = WAR_rel.intersect(precedes)\nWAR_rel = WAR_rel.apply_domain(padded_schedule.reverse()).apply_range(padded_schedule.reverse())\nprint_latex(WAR_rel)","\\[(N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{T}(i' = i, j' = j, k') \\mid k' > k \\,\\}\\]\n","python"],"15":["## Write-After-Write","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"writeafterwrite\">Write-After-Write</h2>\n","markdown"],"16":["WAW_rel = writes.apply_range(writes.reverse())\nWAW_rel = WAW_rel.apply_domain(padded_schedule).apply_range(padded_schedule)\nWAW_rel = WAW_rel.intersect(precedes)\nWAW_rel = WAW_rel.apply_domain(padded_schedule.reverse()).apply_range(padded_schedule.reverse())\nprint_latex(WAW_rel)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to \\mathrm{T}(i' = i, j' = j, k) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{T}(i' = i, j' = j, k') \\mid k' > k \\,\\}\\\\\\end{array}\\]\n","python"],"17":["## Dependence Relation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"dependencerelation\">Dependence Relation</h2>\n","markdown"],"18":["dependence_rel = RAW_rel\ndependence_rel = dependence_rel.union(WAR_rel)\ndependence_rel = dependence_rel.union(WAW_rel)\nprint_latex(dependence_rel)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{T}(i' = i, j' = j, k') \\mid k' > k \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to \\mathrm{T}(i' = i, j' = j, k) \\,\\}\\\\\\end{array}\\]\n","python"],"19":["## Check Transformation Legality\n### Invert dependence relation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"checktransformationlegality\">Check Transformation Legality</h2>\n<h3 id=\"invertdependencerelation\">Invert dependence relation</h3>\n","markdown"],"20":["dependence_reverse_rel = dependence_rel.reverse()\nprint_latex(dependence_reverse_rel)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{S}(i' = i, j' = j) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to \\mathrm{T}(i' = i, j' = j, k') \\mid k' < k \\,\\}\\\\\\end{array}\\]\n","python"],"21":["### Test Permutation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h3 id=\"testpermutation\">Test Permutation</h3>\n","markdown"],"22":["i_j_permute = isl.union_map(\"{[i1,i,i3,j,i5,k,i7]-> [i1,j,i3,i,i5,k,i7]}\")\ni_j_permuted_schedule= padded_schedule.apply_range(i_j_permute)\nprint_latex(i_j_permuted_schedule)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to (0, j, 0, i, 0, 0, 0) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to (0, j, 0, i, 1, k, 0) \\,\\}\\\\\\end{array}\\]\n","python"],"23":["#### Generate Transformed Code","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h4 id=\"generatetransformedcode\">Generate Transformed Code</h4>\n","markdown"],"24":["context1 = isl.set(\"{ : }\")\nbuild = isl.ast_build.from_context(context1) \nast = build.node_from_schedule_map(i_j_permuted_schedule.intersect_domain(domain))\nprint_code(ast)","<pre class='code'><code class=\"cpp hljs\">for (int c1 = 0; c1 < M; c1 += 1)\n  for (int c3 = 0; c3 < N; c3 += 1) {\n    S(c3, c1);\n    for (int c5 = 0; c5 < K; c5 += 1)\n      T(c3, c1, c5);\n  }\n</code></pre>\n","python"],"25":["#### Check Legality of Permutation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h4 id=\"checklegalityofpermutation\">Check Legality of Permutation</h4>\n","markdown"],"26":["broken_dep_rel = dependence_reverse_rel.apply_domain(i_j_permuted_schedule).apply_range(i_j_permuted_schedule)\nbroken_dep_rel = broken_dep_rel.intersect(precedes)\nbroken_dep_rel = broken_dep_rel.apply_domain(i_j_permuted_schedule.reverse()).apply_range(i_j_permuted_schedule.reverse())\n\nif broken_dep_rel.is_empty():\n    print(\"The transformation is Legal :)\")\nelse:\n    print(\"You broke it :(\")\n    print_latex(broken_dep_rel.reverse())","The transformation is Legal :)\n","python"],"27":["## Test S scheduled after T","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h2 id=\"testsscheduledaftert\">Test S scheduled after T</h2>\n","markdown"],"28":["#### S permutation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h4 id=\"spermutation\">S permutation</h4>\n","markdown"],"29":["s_permute = isl.union_map(\"{[0,i,i3,j,0,0,0]-> [1,i,i3,j,0,0,0];[i1,i2,i3,i4,1,i6,i7]-> [i1,i2,i3,i4,1,i6,i7]}\")\ns_permuted_schedule= padded_schedule.apply_range(s_permute)\nprint_latex(s_permuted_schedule)","\\[\\begin{array}{l}(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to (1, i, 0, j, 0, 0, 0) \\,\\} \\cup\\\\\\quad\\cup (N, M, K) \\to \\{\\, \\mathrm{T}(i, j, k) \\to (0, i, 0, j, 1, k, 0) \\,\\}\\\\\\end{array}\\]\n","python"],"30":["context1 = isl.set(\"{ : }\")\nbuild = isl.ast_build.from_context(context1) \nast = build.node_from_schedule_map(s_permuted_schedule.intersect_domain(domain))\nprint_code(ast)","<pre class='code'><code class=\"cpp hljs\">{\n  for (int c1 = 0; c1 < N; c1 += 1)\n    for (int c3 = 0; c3 < M; c3 += 1)\n      for (int c5 = 0; c5 < K; c5 += 1)\n        T(c1, c3, c5);\n  for (int c1 = 0; c1 < N; c1 += 1)\n    for (int c3 = 0; c3 < M; c3 += 1)\n      S(c1, c3);\n}\n</code></pre>\n","python"],"31":["#### Check Legality of S permutation","<a onclick='pt_editMarkdown(this)' tabindex='-1' class=\"pt-markdown-link\">[Markdown]</a><h4 id=\"checklegalityofspermutation\">Check Legality of S permutation</h4>\n","markdown"],"32":["broken_dep_rel = dependence_reverse_rel.apply_domain(s_permuted_schedule).apply_range(s_permuted_schedule)\nbroken_dep_rel = broken_dep_rel.intersect(precedes)\nbroken_dep_rel = broken_dep_rel.apply_domain(s_permuted_schedule.reverse()).apply_range(s_permuted_schedule.reverse())\n\nif broken_dep_rel.is_empty():\n    print(\"The transformation is Legal :)\")\nelse:\n    print(\"You broke it :(\")\n    print_latex(broken_dep_rel.reverse())","You broke it :(\n\\[(N, M, K) \\to \\{\\, \\mathrm{S}(i, j) \\to \\mathrm{T}(i' = i, j' = j, k) \\,\\}\\]\n","python"],"33":["","",""]}